--- ../src-base/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
@@ -96,6 +96,7 @@
         this.field_94252_e.clear();
         this.field_94258_i.clear();
         int j = Integer.MAX_VALUE;
+        cpw.mods.fml.common.ProgressManager.ProgressBar bar = cpw.mods.fml.common.ProgressManager.push("Texture stitching", this.field_110574_e.size());
         Iterator iterator = this.field_110574_e.entrySet().iterator();
         TextureAtlasSprite textureatlassprite;
 
@@ -105,6 +106,7 @@
             ResourceLocation resourcelocation = new ResourceLocation((String)entry.getKey());
             textureatlassprite = (TextureAtlasSprite)entry.getValue();
             ResourceLocation resourcelocation1 = this.func_147634_a(resourcelocation, 0);
+            bar.step(resourcelocation1.func_110623_a());
 
             try
             {
@@ -156,12 +158,14 @@
             }
             catch (RuntimeException runtimeexception)
             {
-                field_147635_d.error("Unable to parse metadata from " + resourcelocation1, runtimeexception);
+                //logger.error("Unable to parse metadata from " + resourcelocation1, runtimeexception);
+                cpw.mods.fml.client.FMLClientHandler.instance().trackBrokenTexture(resourcelocation1, runtimeexception.getMessage());
                 continue;
             }
             catch (IOException ioexception1)
             {
-                field_147635_d.error("Using missing texture, unable to load " + resourcelocation1, ioexception1);
+                //logger.error("Using missing texture, unable to load " + resourcelocation1, ioexception1);
+                cpw.mods.fml.client.FMLClientHandler.instance().trackMissingTexture(resourcelocation1);
                 continue;
             }
@@ -169,6 +173,7 @@
             stitcher.func_110934_a(textureatlassprite);
         }
 
+        cpw.mods.fml.common.ProgressManager.pop(bar);
         int i1 = MathHelper.func_151239_c(j);
 
         if (i1 < this.field_147636_j)
@@ -178,10 +183,12 @@
         }
 
         Iterator iterator1 = this.field_110574_e.values().iterator();
+        bar = cpw.mods.fml.common.ProgressManager.push("Mipmap generation", this.field_110574_e.size());
 
         while (iterator1.hasNext())
         {
             final TextureAtlasSprite textureatlassprite1 = (TextureAtlasSprite)iterator1.next();
+            bar.step(textureatlassprite1.func_94215_i());
 
             try
             {
@@ -222,9 +229,12 @@
 
         this.field_94249_f.func_147963_d(this.field_147636_j);
         stitcher.func_110934_a(this.field_94249_f);
+        cpw.mods.fml.common.ProgressManager.pop(bar);
+        bar = cpw.mods.fml.common.ProgressManager.push("Texture creation", 3);
 
         try
         {
+            bar.step("Stitching");
             stitcher.func_94305_f();
         }
         catch (StitcherException stitcherexception)
@@ -233,10 +243,12 @@
         }
 
         field_147635_d.info("Created: {}x{} {}-atlas", new Object[] {Integer.valueOf(stitcher.func_110935_a()), Integer.valueOf(stitcher.func_110936_b()), this.field_94254_c});
+        bar.step("Allocating GL texture");
         TextureUtil.func_147946_a(this.func_110552_b(), this.field_147636_j, stitcher.func_110935_a(), stitcher.func_110936_b(), (float)this.field_147637_k);
         HashMap hashmap = Maps.newHashMap(this.field_110574_e);
         Iterator iterator2 = stitcher.func_94309_g().iterator();
 
+        bar.step("Uploading GL texture");
         while (iterator2.hasNext())
         {
             textureatlassprite = (TextureAtlasSprite)iterator2.next();
@@ -274,6 +286,7 @@
             textureatlassprite = (TextureAtlasSprite)iterator2.next();
             textureatlassprite.func_94217_a(this.field_94249_f);
         }
+        cpw.mods.fml.common.ProgressManager.pop(bar);
     }
 
     private ResourceLocation func_147634_a(ResourceLocation p_147634_1_, int p_147634_2_)
 
