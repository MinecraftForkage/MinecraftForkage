--- ../src-base/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
@@ -29,6 +29,7 @@
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.ResourceLocation;
+import net.minecraftforge.client.ForgeHooksClient;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -35,6 +36,7 @@
 @SideOnly(Side.CLIENT)
 public class TextureMap extends AbstractTexture implements ITickableTextureObject, IIconRegister
 {
+    private static final boolean ENABLE_SKIP = Boolean.parseBoolean(System.getProperty("fml.skipFirstTextureLoad", "true"));
     private static final Logger field_147635_d = LogManager.getLogger();
     public static final ResourceLocation field_110575_b = new ResourceLocation("textures/atlas/blocks.png");
     public static final ResourceLocation field_110576_c = new ResourceLocation("textures/atlas/items.png");
@@ -47,12 +49,18 @@
     private int field_147637_k = 1;
     private final TextureAtlasSprite field_94249_f = new TextureAtlasSprite("missingno");
     private static final String __OBFID = "CL_00001058";
+    private boolean skipFirst = false;
 
     public TextureMap(int p_i1281_1_, String p_i1281_2_)
     {
+        this(p_i1281_1_, p_i1281_2_, false);
+    }
+    public TextureMap(int p_i1281_1_, String p_i1281_2_, boolean skipFirst)
+    {
         this.field_94255_a = p_i1281_1_;
         this.field_94254_c = p_i1281_2_;
         this.func_110573_f();
+        this.skipFirst = skipFirst && ENABLE_SKIP;
     }
 
     private void func_110569_e()
@@ -84,21 +92,36 @@
 
     public void func_110571_b(IResourceManager p_110571_1_)
     {
+        func_110573_f(); //Re-gather list of Icons, allows for addition/removal of blocks/items after this map was initially constructed.
+
         int i = Minecraft.func_71369_N();
         Stitcher stitcher = new Stitcher(i, i, true, 0, this.field_147636_j);
         this.field_94252_e.clear();
         this.field_94258_i.clear();
         int j = Integer.MAX_VALUE;
+        ForgeHooksClient.onTextureStitchedPre(this);
+        cpw.mods.fml.common.ProgressManager.ProgressBar bar = cpw.mods.fml.common.ProgressManager.push("Texture Loading", skipFirst ? 0 : this.field_110574_e.size());
         Iterator iterator = this.field_110574_e.entrySet().iterator();
         TextureAtlasSprite textureatlassprite;
 
-        while (iterator.hasNext())
+        while (!skipFirst && iterator.hasNext())
         {
             Entry entry = (Entry)iterator.next();
             ResourceLocation resourcelocation = new ResourceLocation((String)entry.getKey());
             textureatlassprite = (TextureAtlasSprite)entry.getValue();
             ResourceLocation resourcelocation1 = this.func_147634_a(resourcelocation, 0);
+            bar.step(resourcelocation1.func_110623_a());
 
+            if (textureatlassprite.hasCustomLoader(p_110571_1_, resourcelocation))
+            {
+                if (!textureatlassprite.load(p_110571_1_, resourcelocation))
+                {
+                    j = Math.min(j, Math.min(textureatlassprite.func_94211_a(), textureatlassprite.func_94216_b()));
+                    stitcher.func_110934_a(textureatlassprite);
+                }
+                continue;
+            }
+
             try
             {
                 IResource iresource = p_110571_1_.func_110536_a(resourcelocation1);
@@ -156,11 +165,13 @@
             }
             catch (RuntimeException runtimeexception)
             {
-                field_147635_d.error("Unable to parse metadata from " + resourcelocation1, runtimeexception);
+                //logger.error("Unable to parse metadata from " + resourcelocation1, runtimeexception);
+                cpw.mods.fml.client.FMLClientHandler.instance().trackBrokenTexture(resourcelocation1, runtimeexception.getMessage());
                 continue;
             }
             catch (IOException ioexception1)
             {
-                field_147635_d.error("Using missing texture, unable to load " + resourcelocation1, ioexception1);
+                //logger.error("Using missing texture, unable to load " + resourcelocation1, ioexception1);
+                cpw.mods.fml.client.FMLClientHandler.instance().trackMissingTexture(resourcelocation1);
                 continue;
             }
@@ -169,6 +180,7 @@
             stitcher.func_110934_a(textureatlassprite);
         }
 
+        cpw.mods.fml.common.ProgressManager.pop(bar);
         int i1 = MathHelper.func_151239_c(j);
 
         if (i1 < this.field_147636_j)
@@ -178,10 +190,12 @@
         }
 
         Iterator iterator1 = this.field_110574_e.values().iterator();
+        bar = cpw.mods.fml.common.ProgressManager.push("Mipmap generation", this.field_110574_e.size());
 
         while (iterator1.hasNext())
         {
             final TextureAtlasSprite textureatlassprite1 = (TextureAtlasSprite)iterator1.next();
+            bar.step(textureatlassprite1.func_94215_i());
 
             try
             {
@@ -222,9 +236,13 @@
 
         this.field_94249_f.func_147963_d(this.field_147636_j);
         stitcher.func_110934_a(this.field_94249_f);
+        cpw.mods.fml.common.ProgressManager.pop(bar);
+        skipFirst = false;
+        bar = cpw.mods.fml.common.ProgressManager.push("Texture creation", 3);
 
         try
         {
+            bar.step("Stitching");
             stitcher.func_94305_f();
         }
         catch (StitcherException stitcherexception)
@@ -233,10 +251,12 @@
         }
 
         field_147635_d.info("Created: {}x{} {}-atlas", new Object[] {Integer.valueOf(stitcher.func_110935_a()), Integer.valueOf(stitcher.func_110936_b()), this.field_94254_c});
+        bar.step("Allocating GL texture");
         TextureUtil.func_147946_a(this.func_110552_b(), this.field_147636_j, stitcher.func_110935_a(), stitcher.func_110936_b(), (float)this.field_147637_k);
         HashMap hashmap = Maps.newHashMap(this.field_110574_e);
         Iterator iterator2 = stitcher.func_94309_g().iterator();
 
+        bar.step("Uploading GL texture");
         while (iterator2.hasNext())
         {
             textureatlassprite = (TextureAtlasSprite)iterator2.next();
@@ -267,6 +288,8 @@
             textureatlassprite = (TextureAtlasSprite)iterator2.next();
             textureatlassprite.func_94217_a(this.field_94249_f);
         }
+        ForgeHooksClient.onTextureStitchedPost(this);
+        cpw.mods.fml.common.ProgressManager.pop(bar);
     }
 
     private ResourceLocation func_147634_a(ResourceLocation p_147634_1_, int p_147634_2_)
@@ -340,7 +362,7 @@
         {
             throw new IllegalArgumentException("Name cannot be null!");
         }
-        else if (p_94245_1_.indexOf(47) == -1 && p_94245_1_.indexOf(92) == -1)
+        else if (p_94245_1_.indexOf(92) == -1) // Disable backslashes (\) in texture asset paths.
         {
             Object object = (TextureAtlasSprite)this.field_110574_e.get(p_94245_1_);
 
@@ -396,4 +418,37 @@
     {
         this.field_147637_k = p_147632_1_;
     }
+
+    //===================================================================================================
+    //                                           Forge Start
+    //===================================================================================================
+    /**
+     * Grabs the registered entry for the specified name, returning null if there was not a entry.
+     * Opposed to registerIcon, this will not instantiate the entry, useful to test if a mapping exists.
+     *
+     * @param name The name of the entry to find
+     * @return The registered entry, null if nothing was registered.
+     */
+    public TextureAtlasSprite getTextureExtry(String name)
+    {
+        return (TextureAtlasSprite)field_110574_e.get(name);
+    }
+
+    /**
+     * Adds a texture registry entry to this map for the specified name if one does not already exist.
+     * Returns false if the map already contains a entry for the specified name.
+     *
+     * @param name Entry name
+     * @param entry Entry instance
+     * @return True if the entry was added to the map, false otherwise.
+     */
+    public boolean setTextureEntry(String name, TextureAtlasSprite entry)
+    {
+        if (!field_110574_e.containsKey(name))
+        {
+            field_110574_e.put(name, entry);
+            return true;
+        }
+        return false;
+    }
 }
