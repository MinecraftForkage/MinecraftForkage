<?xml version="1.0" encoding="UTF-8"?>
<project name="MCForkage Core" xmlns:x="antlib:net.mcforkage.ant">
	
	
	
	<mkdir dir="build"/>
	<mkdir dir="build/download"/>
	
	<property name="downloaded-client-jar" value="build/download/minecraft.jar"/>
	<property name="downloaded-server-jar" value="build/download/minecraft_server.jar"/>
	
	<property name="launcher-version-name" value="MCForkage-1.7.10-1.4"/>
	
	<!-- Compile core-BuildTools, if necessary, and load it -->
	<property name="buildtools.ant" value="../core-BuildTools/build.xml"/>
	<property name="buildtools.jar" value="../core-BuildTools/build/BuildTools.jar"/>
	<ant antfile="${buildtools.ant}" useNativeBasedir="true"/>
	<taskdef uri="antlib:net.mcforkage.ant" resource="net/mcforkage/ant/antlib.xml" classpath="${buildtools.jar}"/>
	
	
	<target name="get-libraries">
		<mkdir dir="libraries"/>
		<mkdir dir="libraries/natives"/>
		<x:getlibs jsonfile="build-data/launcher.json" libsdir="libraries" nativesdir="libraries/natives"/>
	</target>
	
	<target name="download-minecraft">
		<x:download file="${downloaded-client-jar}" url="http://s3.amazonaws.com/Minecraft.Download/versions/1.7.10/1.7.10.jar"/>
		<x:download file="${downloaded-server-jar}" url="http://s3.amazonaws.com/Minecraft.Download/versions/1.7.10/minecraft_server.1.7.10.jar"/>
	</target>
	
	<target name="process-bytecode" depends="download-minecraft">
		
		<x:merge-jars
			client="${downloaded-client-jar}" server="${downloaded-server-jar}"
			output="build/minecraft_merged.jar" config="build-data/mcp_merge.cfg"/>
		
		<x:apply-srg input="build/minecraft_merged.jar" output="build/temp_bytecode.jar" srg="build-data/joined.srg"/>
		<x:process-multi input="build/temp_bytecode.jar" output="build/processed_binary.jar">
			<processor config="build-data/exceptor.json" class="bytecode.ApplyExceptorJson"/>
			<processor config="new-src/fml_at.cfg" class="bytecode.ApplyAT"/>
			<processor config="new-src/forge_at.cfg" class="bytecode.ApplyAT"/>
			<processor config="build-data/joined.exc" class="bytecode.ApplyExceptions"/>
			<processor config="build-data/joined.exc" class="bytecode.ApplyParamNames"/>
			<processor config="build-data/joined.exc" class="bytecode.AddOBFID"/>
			<processor class="bytecode.RemoveGenericMethods"/>
		</x:process-multi>

	</target>
	
	<target name="decompile" depends="process-bytecode">
		
		<mkdir dir="build/fftemp"/>
		<delete><fileset dir="build/fftemp" includes="**/*"/></delete>
		<!-- TODO: mod fernflower to output where we want, instead of needing a fftemp directory -->
		<java fork="true" classname="org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler" classpath="${buildtools.jar}"
			maxmemory="512M">
			<arg value="-din=1"/>
			<arg value="-rbr=0"/>
			<arg value="-dgs=1"/>
			<arg value="-asc=1"/>
			<arg value="-log=ALL"/>
			<arg value="build/processed_binary.jar"/>
			<arg value="build/fftemp"/>
		</java>
		<move file="build/fftemp/processed_binary.jar" tofile="build/raw_source.zip" overwrite="true"/>
		<delete dir="build/fftemp" includeEmptyDirs="true"/>
	</target>
	
	<target name="process-source" depends="decompile">
		<concat destfile="build/fml.patch">
			<fileset dir="patches/fml" includes="**/*.patch"/>
		</concat>
		<concat destfile="build/forge.patch">
			<fileset dir="patches/forge" includes="**/*.patch"/>
		</concat>
		<x:process-zip input="build/raw_source.zip" output="build/temp_source.zip" config="build-data/astyle.cfg" class="decompsource.MCPCleanup"/>
		<x:process-zip input="build/temp_source.zip" output="build/patched_source_fml.zip" config="build/fml.patch" class="decompsource.ApplyUnifiedDiffs"/>
		<x:process-zip input="build/patched_source_fml.zip" output="build/patched_source_forge.zip" config="build/forge.patch" class="decompsource.ApplyUnifiedDiffs"/>
		<x:remap-sources input="build/patched_source_forge.zip" output="build/processed_source.zip" methods="build-data/methods.csv" fields="build-data/fields.csv" params="build-data/params.csv" nojavadocs="true"/>
	</target>
	
	<target name="extractsrc" depends="get-libraries, process-source" description="Decompile, and extract source code. This is the only target you need to run to get a dev environment.">
		<delete dir="vanilla-src" failonerror="false"/>
		<mkdir dir="vanilla-src"/>
		
		<unzip src="build/processed_source.zip" dest="vanilla-src"/>
	</target>
	
	<target name="recompile" depends="get-libraries" description="Recompile and reobfuscate the core, but do not generate the installer. Useful for testing.">
		
		<delete quiet="true">
			<fileset dir="build/edited-classes" includes="**/*"/>
		</delete>
		<mkdir dir="build/edited-classes"/>
		
		<javac destdir="build/edited-classes" debug="on" includeAntRuntime="false" source="1.6" target="1.6">
			<src path="vanilla-src"/>
			<src path="new-src"/>
			<src path="compat-src"/>
			<include name="**/*.java"/>
			<classpath>
				<fileset dir="libraries">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</javac>
		<copy todir="build/edited-classes">
			<fileset dir="vanilla-src">
				<exclude name="**/*.java"/>
				<exclude name="META-INF/MANIFEST.MF"/>
				<exclude name="META-INF/*.DSA"/>
				<exclude name="META-INF/*.SF"/>
			</fileset>
			<fileset dir="new-src" excludes="**/*.java"/>
			<fileset dir="compat-src" excludes="**/*.java"/>
		</copy>
		<jar destfile="build/recomp.jar" basedir="build/edited-classes"/>
		
		<x:csv2srg methods="build-data/methods.csv" fields="build-data/fields.csv" srg="build-data/joined.srg" output="build/srg-to-mcp.srg"/>
		<x:invert-srg input="build/srg-to-mcp.srg" output="build/mcp-to-srg.srg"/>
		
		<x:apply-srg input="build/recomp.jar" output="build/reobf.jar" srg="build/mcp-to-srg.srg"/>
	</target>
	
	<target name="incremental-recompile" depends="get-libraries" description="Recompile incrementally, then reobfuscate. Useful for rapid testing.">
		
		<javac destdir="build/edited-classes" debug="on" includeAntRuntime="false" source="1.6" target="1.6">
			<src path="vanilla-src"/>
			<src path="new-src"/>
			<src path="compat-src"/>
			<include name="**/*.java"/>
			<classpath>
				<fileset dir="libraries">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</javac>
		<copy todir="build/edited-classes">
			<fileset dir="vanilla-src">
				<exclude name="**/*.java"/>
				<exclude name="META-INF/MANIFEST.MF"/>
				<exclude name="META-INF/*.DSA"/>
				<exclude name="META-INF/*.SF"/>
			</fileset>
			<fileset dir="new-src" excludes="**/*.java"/>
			<fileset dir="compat-src" excludes="**/*.java"/>
		</copy>
		<jar destfile="build/recomp.jar" basedir="build/edited-classes"/>
		
		<x:csv2srg methods="build-data/methods.csv" fields="build-data/fields.csv" srg="build-data/joined.srg" output="build/srg-to-mcp.srg"/>
		<x:invert-srg input="build/srg-to-mcp.srg" output="build/mcp-to-srg.srg"/>
		
		<x:apply-srg input="build/recomp.jar" output="build/reobf.jar" srg="build/mcp-to-srg.srg"/>
	</target>
	
	<target name="make-bytecode-text" depends="recompile, process-bytecode">
		<x:process-jar input="build/reobf.jar" output="build/reobf_trimmed.jar" class="bytecode.TrimBytecode"/>
		<x:sort-and-filter-zip input="build/reobf_trimmed.jar" output="build/reobf_trimmed_sorted_filtered.jar" filter="build/processed_binary.jar"/>
		<x:bytecode2text input="build/reobf_trimmed_sorted_filtered.jar" output="build/bytecode-new.txt"/>
		
		<x:process-jar input="build/processed_binary.jar" output="build/processed_binary_trimmed.jar" class="bytecode.TrimBytecode"/>
		<x:sort-and-filter-zip input="build/processed_binary_trimmed.jar" output="build/processed_binary_trimmed_sorted.jar"/>
		<x:bytecode2text input="build/processed_binary_trimmed_sorted.jar" output="build/bytecode-old.txt"/>
	</target>
	
	<target name="make-bytecode-patch" depends="make-bytecode-text">
		<x:diff2 from="build/bytecode-old.txt" to="build/bytecode-new.txt" output="build/bytecode.patch2"/>
		<x:compress-diff2 input="build/bytecode.patch2" output="build/bytecode.patch2z"/>
	</target>
	
	<target name="make-new-classes-pack" depends="recompile">
		<x:sort-and-filter-zip input="build/reobf.jar" filter="build/processed_binary.jar" output="build/new_classes.zip" invertfilter="true"/>
		<x:pack200 input="build/new_classes.zip" output="build/new-classes.pack"/>
	</target>
	
	<target name="make-installer" depends="make-bytecode-patch, make-new-classes-pack" description="Make build/installer.jar. Requires that you have done extractsrc first.">
		<copy file="build-data/launcher.json" tofile="build/install.json" overwrite="true">
			<filterset begintoken="@@" endtoken="@@">
				<filter token="LAUNCHER-VERSION-NAME" value="${launcher-version-name}"/>
			</filterset>
		</copy>
<echo file="build/install.properties">#
mcver=1.7.10
launcherVersionName=${launcher-version-name}
</echo>
		<zip destfile="build/install-data.zip" compress="false">
			<fileset dir="build">
				<include name="new-classes.pack"/>
				<include name="bytecode.patch2z"/>
				<include name="install.properties"/>
				<include name="install.json"/>
			</fileset>
			<fileset dir="build-data">
				<include name="joined.srg"/>
				<include name="joined.exc"/>
				<include name="exceptor.json"/>
				<include name="mcp_merge.cfg"/>
			</fileset>
			<fileset dir="new-src">
				<include name="fml_at.cfg"/>
				<include name="forge_at.cfg"/>
			</fileset>
		</zip>
		<!-- <x:lzma input="build/install-data.zip" output="build/install-data.zip.lzma"/>-->
		<gzip src="build/install-data.zip" destfile="build/install-data.zip.gz"/>
		<jar destfile="build/installer.jar" manifest="build/BuildTools/installer/META-INF/MANIFEST.MF">
			<fileset dir="build/BuildTools"/>
			<fileset dir="build" includes="install-data.zip.gz"/>
		</jar>
	</target>
	
	<target name="clean" description="Delete temporary files, except download cache">
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="build" excludes="download/*"/>
		</delete>
		<delete dir="vanilla-src" failonerror="false"/>
	</target>
</project>